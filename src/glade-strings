/*
 * Archivo de cadenas traducibles generado por Glade.
 * Añada este archivo a su POTFILES.in de su proyecto.
 * NO lo compile como parte de su aplicación.
 */

gchar *s = N_("EtherApe");
gchar *s = N_("_Capture");
gchar *s = N_("_Mode");
gchar *s = N_("Set Token Ring mode");
gchar *s = N_("Token _Ring");
gchar *s = N_("Set FDDI mode");
gchar *s = N_("_FDDI");
gchar *s = N_("Set Ethernet mode");
gchar *s = N_("_Ethernet");
gchar *s = N_("Set IP mode");
gchar *s = N_("_IP");
gchar *s = N_("Set TCP mode");
gchar *s = N_("_TCP");
gchar *s = N_("Set UDP mode");
gchar *s = N_("_UDP");
gchar *s = N_("_Interfaces");
gchar *s = N_("Start capture");
gchar *s = N_("_Start");
gchar *s = N_("Pause capture");
gchar *s = N_("_Pause");
gchar *s = N_("Stop capture");
gchar *s = N_("St_op");
gchar *s = N_("Show or hide the protocols window");
gchar *s = N_("_Protocols");
gchar *s = N_("Show or hide the toolbar");
gchar *s = N_("_Toolbar");
gchar *s = N_("Show or hide the legend");
gchar *s = N_("_Legend");
gchar *s = N_("Show or hide the status bar");
gchar *s = N_("_Status Bar");
gchar *s = N_("Start capture");
gchar *s = N_("Start");
gchar *s = N_("Pause capture");
gchar *s = N_("Pause");
gchar *s = N_("Stop capture");
gchar *s = N_("Stop");
gchar *s = N_("Preferences (Ctrl-P)");
gchar *s = N_("Pref.");
gchar *s = N_("Display the protocols window");
gchar *s = N_("Prot.");
gchar *s = N_("Protocols");
gchar *s = N_("Copyright 2001 Juan Toledo");
gchar *s = N_("A Graphical Network Browser.\n"
              "Web: http://etherape.sourceforge.net");
gchar *s = N_("window1");
gchar *s = N_("name");
gchar *s = N_("accumulated");
gchar *s = N_("average");
gchar *s = N_("This message is not here yet. (Don´t tell anybody you saw it ;-) )");
gchar *s = N_("Information");
gchar *s = N_("EtherApe: Preferences");
gchar *s = N_("Save");
gchar *s = N_("Font");
gchar *s = N_("Choose the font used to display text in the diagram");
gchar *s = N_("Protocol Stack Level");
gchar *s = N_("Set what level of the protocol stack is displayed in the legend");
gchar *s = N_("Topmost recognized protocol");
gchar *s = N_("Level 2 (Eg: ETH_II)");
gchar *s = N_("Level 3 (Eg: IP)");
gchar *s = N_("Level 4 (Eg: TCP)");
gchar *s = N_("Level 5 (Eg: HTTP)");
gchar *s = N_("Node size variable");
gchar *s = N_("Set the kind of instantenous or accumulated traffic that the node radius indicates");
gchar *s = N_("Instant. traffic (In+Out)");
gchar *s = N_("Instant. traffic (Inbound)");
gchar *s = N_("Instant. traffic (Outbound)");
gchar *s = N_("Accum. traffic (In+Out)");
gchar *s = N_("Accum. traffic (Inbound)");
gchar *s = N_("Accum. traffic (Outbound)");
gchar *s = N_("Diagram refresh period (ms)");
gchar *s = N_("Refresh diagram every this many miliseconds");
gchar *s = N_("Diagram Node Timeout (ms)");
gchar *s = N_("Remove this node from the diagram after this much time. 0 means never timeout.");
gchar *s = N_("Max. Link Width");
gchar *s = N_("Max. Node Radius");
gchar *s = N_("Size Mode");
gchar *s = N_("Choose how node radius and link width are calculated as a function of average traffic");
gchar *s = N_("Linear");
gchar *s = N_("Logarithmic");
gchar *s = N_("Square Root");
gchar *s = N_("Toggle whether the node names are displayed on top of the nodes");
gchar *s = N_("Hide node names");
gchar *s = N_("Group unknown ports");
gchar *s = N_("Diagram");
gchar *s = N_("Color");
gchar *s = N_("Protocol");
gchar *s = N_("Add a new color to the list of colors that can be used to represent protocols");
gchar *s = N_("Add color");
gchar *s = N_("Remove color");
gchar *s = N_("Edit protocol");
gchar *s = N_("Fade link colors to black when there is no traffic");
gchar *s = N_("Fade colors");
gchar *s = N_("Whether or not to use assigned colors for unassigned protocols");
gchar *s = N_("Cycle assigned colors");
gchar *s = N_("Colors");
gchar *s = N_("Mode");
gchar *s = N_("Token Ring");
gchar *s = N_("FDDI");
gchar *s = N_("Ethernet");
gchar *s = N_("IP");
gchar *s = N_("TCP");
gchar *s = N_("Protocol");
gchar *s = N_("Solved");
gchar *s = N_("Add a new protocol to the list of protocols to choose a name from");
gchar *s = N_("Add protocol");
gchar *s = N_("Remove selected protocol");
gchar *s = N_("Remove protocol");
gchar *s = N_("Toggle whether the selected protocol name has to be solved in order to use it");
gchar *s = N_("Toggle solved");
gchar *s = N_("Move selected protocol up one item");
gchar *s = N_("Move up");
gchar *s = N_("Move selected protocol down one item");
gchar *s = N_("Move down");
gchar *s = N_("Don't try to resolve any name. Always present in numeric form.");
gchar *s = N_("Force numeric");
gchar *s = N_("Make DNS queries to resolve IP addresses");
gchar *s = N_("DNS resolution");
gchar *s = N_("Names");
gchar *s = N_("Capture filter");
gchar *s = N_("Packet information is averaged for this amount of time");
gchar *s = N_("Averaging Time (ms)");
gchar *s = N_("Delete this link after this much time. 0 means never timeout.");
gchar *s = N_("Link Timeout (ms)");
gchar *s = N_("Delete this node from memory after this much time. 0 means never timeout.");
gchar *s = N_("Node Timeout (ms)");
gchar *s = N_("Capture");
gchar *s = N_("Select Font");
gchar *s = N_("EtherApe: Open Capture File");
gchar *s = N_("EtherApe: Select capture file");
gchar *s = N_("EtherApe: Select Capture File");
gchar *s = N_("Select capture file");
gchar *s = N_("Optionally, set a capture filter");
gchar *s = N_("File:");
gchar *s = N_("Filter:");
gchar *s = N_("Name:");
gchar *s = N_("This is a test node name");
gchar *s = N_("Numeric Name:");
gchar *s = N_("This is a test node name");
gchar *s = N_("Show traffic");
gchar *s = N_("Show protocols");
gchar *s = N_("Instantaneous");
gchar *s = N_("test label");
gchar *s = N_("Accumulated");
gchar *s = N_("test label");
gchar *s = N_("Inst. Inbound");
gchar *s = N_("test label");
gchar *s = N_("Accu. Outbound");
gchar *s = N_("test label");
gchar *s = N_("Accu. Inbound");
gchar *s = N_("test label");
gchar *s = N_("Inst. Outbound");
gchar *s = N_("test label");
gchar *s = N_("EtherApe: Protocols");
gchar *s = N_("Columns");
gchar *s = N_("Protocol");
gchar *s = N_("Inst Traffic");
gchar *s = N_("Accum Traffic");
gchar *s = N_("Last Heard");
gchar *s = N_("Packets");
gchar *s = N_("Protocol");
gchar *s = N_("Inst Traffic");
gchar *s = N_("Accum Traffic");
gchar *s = N_("Last Heard");
gchar *s = N_("Packets");
gchar *s = N_("name");
gchar *s = N_("Last Heard: ");
gchar *s = N_("label73");
gchar *s = N_("Instantaneous");
gchar *s = N_("test label");
gchar *s = N_("Accumulated");
gchar *s = N_("test label");
gchar *s = N_("Nodes");
gchar *s = N_("Select color");
gchar *s = N_("ok_button2");
gchar *s = N_("cancel_button2");
gchar *s = N_("help_button1");
gchar *s = N_("EtherApe: assign protocol");
gchar *s = N_("Type protocol name...");
gchar *s = N_("Type the name of the protocol that will be assigned to the selected color");
